basePath: /
definitions:
  models.AcceptRequest:
    properties:
      id:
        type: integer
    type: object
  models.Answer:
    properties:
      answer_text:
        type: string
      answer_value:
        type: integer
      question_id:
        type: integer
    type: object
  models.FriendRequest:
    properties:
      created_at:
        type: string
      id:
        type: integer
      receiver_id:
        type: integer
      receiver_username:
        type: string
      sender_id:
        type: integer
      sender_username:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.MatchedProfile:
    properties:
      alcohol:
        type: string
      bio:
        type: string
      birth_place:
        type: string
      birth_time:
        type: string
      caste:
        type: string
      city:
        type: string
      civil_status:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      dietary_preference:
        type: string
      district:
        type: string
      employment_status:
        type: string
      father_occupation:
        type: string
      field_of_study:
        type: string
      gender:
        type: string
      height_cm:
        type: integer
      highest_education:
        type: string
      horoscope:
        type: string
      horoscope_available:
        type: boolean
      id:
        type: integer
      institution:
        type: string
      interests:
        description: Array of interests
        items:
          type: string
        type: array
      languages:
        items:
          type: string
        type: array
      phone_number:
        type: string
      contact_verified:
        type: boolean
      identity_verified:
        type: boolean
      last_active_at:
        type: string
      location:
        type: string
      metadata:
        type: string
      moderation_status:
        type: string
      mother_occupation:
        type: string
      nakshatra:
        type: string
      occupation:
        type: string
      postal_code:
        type: string
      profile_image_thumb_url:
        type: string
      profile_image_url:
        type: string
      province:
        type: string
      reasons:
        type: object
      religion:
        type: string
      religion_detail:
        type: string
      score:
        type: number
      siblings:
        type: string
      siblings_count:
        type: integer
      sinhala_raasi:
        type: string
      smoking:
        type: string
      updated_at:
        type: string
      user_id:
        description: Foreign key to users table
        type: integer
      username:
        type: string
      verified:
        type: boolean
      weight_kg:
        type: integer
    type: object
  models.ProfileEnums:
    properties:
      civil_status:
        items:
          type: string
        type: array
      dietary_preference:
        items:
          type: string
        type: array
      education_level:
        items:
          type: string
        type: array
      employment_status:
        items:
          type: string
        type: array
      habit_frequency:
        items:
          type: string
        type: array
    type: object
  models.Question:
    properties:
      id:
        type: integer
      options:
        items:
          type: string
        type: array
      questionText:
        type: string
      questionType:
        type: string
    type: object
  models.RejectRequest:
    properties:
      id:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  models.UserProfile:
    properties:
      alcohol:
        type: string
      bio:
        type: string
      birth_place:
        type: string
      birth_time:
        type: string
      caste:
        type: string
      city:
        type: string
      civil_status:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      dietary_preference:
        type: string
      district:
        type: string
      employment_status:
        type: string
      father_occupation:
        type: string
      field_of_study:
        type: string
      gender:
        type: string
      height_cm:
        type: integer
      highest_education:
        type: string
      horoscope:
        type: string
      horoscope_available:
        type: boolean
      id:
        type: integer
      institution:
        type: string
      interests:
        description: Array of interests
        items:
          type: string
        type: array
      languages:
        items:
          type: string
        type: array
      last_active_at:
        type: string
      location:
        type: string
      metadata:
        type: string
      moderation_status:
        type: string
      mother_occupation:
        type: string
      nakshatra:
        type: string
      occupation:
        type: string
      postal_code:
        type: string
      profile_image_thumb_url:
        type: string
      profile_image_url:
        type: string
      province:
        type: string
      religion:
        type: string
      religion_detail:
        type: string
      siblings:
        type: string
      siblings_count:
        type: integer
      sinhala_raasi:
        type: string
      smoking:
        type: string
      updated_at:
        type: string
      user_id:
        description: Foreign key to users table
        type: integer
      username:
        type: string
      verified:
        type: boolean
      weight_kg:
        type: integer
    type: object
  utils.AnswersResponse:
    properties:
      answers:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
    type: object
  utils.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  utils.FriendRequestStatusResponse:
    properties:
      requestStatus:
        type: boolean
    type: object
  utils.FriendRequestsResponse:
    properties:
      requests:
        items:
          $ref: '#/definitions/models.FriendRequest'
        type: array
    type: object
  utils.MessageResponse:
    properties:
      message:
        type: string
    type: object
  utils.QuestionnaireResponse:
    properties:
      questions:
        items:
          $ref: '#/definitions/models.Question'
        type: array
    type: object
  utils.TokenResponse:
    properties:
      token:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact: {}
  description: API documentation for the Dating App backend.
  title: Dating App API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Validate credentials and return a JWT access token.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Authenticate a user
      tags:
      - Auth
  /profile/enums:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileEnums'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Retrieve supported enum values for profile fields
      tags:
      - Profiles
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with a username, email, and password.
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /user/acceptRequest:
    post:
      consumes:
      - application/json
      parameters:
      - description: Friend request to accept
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AcceptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Accept a friend request
      tags:
      - Friend Requests
  /user/checkReqStatus/{reciver_id}:
    get:
      parameters:
      - description: Receiver user ID
        in: path
        name: reciver_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.FriendRequestStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check the friend request status with another user
      tags:
      - Friend Requests
  /user/matches/{user_id}:
    get:
      description: Combines compatibility scores from the matching service with profile
        details.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Optional limit for number of matches
        in: query
        name: limit
        type: integer
      - description: Optional offset for pagination
        in: query
        name: offset
        type: integer
      - description: Minimum score filter
        in: query
        name: minScore
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MatchedProfile'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve the best matches for a user
      tags:
      - Matches
  /user/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve the authenticated user's profile
      tags:
      - Profiles
    post:
      consumes:
      - multipart/form-data
      description: Updates the profile information for the authenticated user. Supports
        multipart form data with optional profile image upload.
      parameters:
      - description: Biography
        in: formData
        name: bio
        type: string
      - description: Gender
        in: formData
        name: gender
        type: string
      - description: Date of birth (YYYY-MM-DD)
        in: formData
        name: date_of_birth
        type: string
      - description: Location
        in: formData
        name: location
        type: string
      - description: Interests (can be repeated)
        in: formData
        name: interests
        type: string
      - description: Civil status
        in: formData
        name: civil_status
        type: string
      - description: Religion
        in: formData
        name: religion
        type: string
      - description: Dietary preference
        in: formData
        name: dietary_preference
        type: string
      - description: Smoking habit
        in: formData
        name: smoking
        type: string
      - description: Alcohol habit
        in: formData
        name: alcohol
        type: string
      - description: Languages (can be repeated)
        in: formData
        name: languages
        type: string
      - description: Highest education
        in: formData
        name: highest_education
        type: string
      - description: Employment status
        in: formData
        name: employment_status
        type: string
      - description: Occupation
        in: formData
        name: occupation
        type: string
      - description: Number of siblings
        in: formData
        name: siblings_count
        type: integer
      - description: Whether a horoscope is available
        in: formData
        name: horoscope_available
        type: boolean
      - description: Profile image
        in: formData
        name: profile_image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create or update the authenticated user's profile
      tags:
      - Profiles
  /user/profile/{user_id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve a user profile by ID
      tags:
      - Profiles
  /user/profiles:
    get:
      parameters:
      - description: Filter by gender
        in: query
        name: gender
        type: string
      - description: Filter by civil status
        in: query
        name: civil_status
        type: string
      - description: Filter by religion
        in: query
        name: religion
        type: string
      - description: Filter by dietary preference
        in: query
        name: dietary_preference
        type: string
      - description: Filter by smoking habit
        in: query
        name: smoking
        type: string
      - description: Filter by country code
        in: query
        name: country_code
        type: string
      - description: Filter by education
        in: query
        name: highest_education
        type: string
      - description: Filter by employment status
        in: query
        name: employment_status
        type: string
      - description: Filter by age
        in: query
        name: age
        type: integer
      - description: Filter by horoscope availability
        in: query
        name: horoscope_available
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserProfile'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user profiles with optional filters
      tags:
      - Profiles
  /user/questionnaire:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.QuestionnaireResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve matchmaking questionnaire
      tags:
      - Questionnaire
  /user/questionnaireAnswers:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.AnswersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve questionnaire answers for the authenticated user
      tags:
      - Questionnaire
  /user/rejectRequest:
    post:
      consumes:
      - application/json
      parameters:
      - description: Friend request to reject
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RejectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reject a friend request
      tags:
      - Friend Requests
  /user/requests:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.FriendRequestsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List pending friend requests
      tags:
      - Friend Requests
  /user/sendRequest:
    post:
      consumes:
      - application/json
      description: Sends a friend request from the authenticated user to another user.
      parameters:
      - description: Friend request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.FriendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send a friend request
      tags:
      - Friend Requests
  /user/sentRequests:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.FriendRequestsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List sent friend requests
      tags:
      - Friend Requests
  /user/submitQuestionnaire:
    post:
      consumes:
      - application/json
      parameters:
      - description: Questionnaire answer
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/models.Answer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Submit questionnaire answers
      tags:
      - Questionnaire
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
