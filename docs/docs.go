// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Validate credentials and return a JWT access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/enums": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Retrieve supported enum values for profile fields",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProfileEnums"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create a new user account with a username, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/acceptRequest": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend Requests"
                ],
                "summary": "Accept a friend request",
                "parameters": [
                    {
                        "description": "Friend request to accept",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AcceptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/checkReqStatus/{reciver_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend Requests"
                ],
                "summary": "Check the friend request status with another user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Receiver user ID",
                        "name": "reciver_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.FriendRequestStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/matches/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Combines compatibility scores from the matching service with profile details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Matches"
                ],
                "summary": "Retrieve the best matches for a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Optional limit for number of matches",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Optional offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum score filter",
                        "name": "minScore",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MatchedProfile"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Retrieve the authenticated user's profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserProfile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the profile information for the authenticated user. Supports multipart form data with optional profile image upload.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Create or update the authenticated user's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Biography",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Gender",
                        "name": "gender",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Date of birth (YYYY-MM-DD)",
                        "name": "date_of_birth",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Location",
                        "name": "location",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Interests (can be repeated)",
                        "name": "interests",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Civil status",
                        "name": "civil_status",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Religion",
                        "name": "religion",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Dietary preference",
                        "name": "dietary_preference",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Smoking habit",
                        "name": "smoking",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Alcohol habit",
                        "name": "alcohol",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Languages (can be repeated)",
                        "name": "languages",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Highest education",
                        "name": "highest_education",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Employment status",
                        "name": "employment_status",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Occupation",
                        "name": "occupation",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Number of siblings",
                        "name": "siblings_count",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether a horoscope is available",
                        "name": "horoscope_available",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Profile image",
                        "name": "profile_image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Retrieve a user profile by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "List user profiles with optional filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by civil status",
                        "name": "civil_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by religion",
                        "name": "religion",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by dietary preference",
                        "name": "dietary_preference",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by smoking habit",
                        "name": "smoking",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country code",
                        "name": "country_code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by education",
                        "name": "highest_education",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by employment status",
                        "name": "employment_status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by horoscope availability",
                        "name": "horoscope_available",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserProfile"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/questionnaire": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Retrieve matchmaking questionnaire",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.QuestionnaireResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/questionnaireAnswers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Retrieve questionnaire answers for the authenticated user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.AnswersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/rejectRequest": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend Requests"
                ],
                "summary": "Reject a friend request",
                "parameters": [
                    {
                        "description": "Friend request to reject",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RejectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend Requests"
                ],
                "summary": "List pending friend requests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.FriendRequestsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/sendRequest": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a friend request from the authenticated user to another user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend Requests"
                ],
                "summary": "Send a friend request",
                "parameters": [
                    {
                        "description": "Friend request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/sentRequests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend Requests"
                ],
                "summary": "List sent friend requests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.FriendRequestsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/submitQuestionnaire": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Submit questionnaire answers",
                "parameters": [
                    {
                        "description": "Questionnaire answer",
                        "name": "answer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Answer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AcceptRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Answer": {
            "type": "object",
            "properties": {
                "answer_text": {
                    "type": "string"
                },
                "answer_value": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "integer"
                }
            }
        },
        "models.FriendRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "receiver_id": {
                    "type": "integer"
                },
                "receiver_username": {
                    "type": "string"
                },
                "sender_id": {
                    "type": "integer"
                },
                "sender_username": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.MatchedProfile": {
            "type": "object",
            "properties": {
                "alcohol": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "birth_place": {
                    "type": "string"
                },
                "birth_time": {
                    "type": "string"
                },
                "caste": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "civil_status": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "dietary_preference": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "employment_status": {
                    "type": "string"
                },
                "father_occupation": {
                    "type": "string"
                },
                "field_of_study": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "height_cm": {
                    "type": "integer"
                },
                "highest_education": {
                    "type": "string"
                },
                "horoscope": {
                    "type": "string"
                },
                "horoscope_available": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "institution": {
                    "type": "string"
                },
                "interests": {
                    "description": "Array of interests",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phone_number": {
                    "type": "string"
                },
                "contact_verified": {
                    "type": "boolean"
                },
                "identity_verified": {
                    "type": "boolean"
                },
                "last_active_at": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "moderation_status": {
                    "type": "string"
                },
                "mother_occupation": {
                    "type": "string"
                },
                "nakshatra": {
                    "type": "string"
                },
                "occupation": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "profile_image_thumb_url": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "reasons": {
                    "type": "object"
                },
                "religion": {
                    "type": "string"
                },
                "religion_detail": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "siblings": {
                    "type": "string"
                },
                "siblings_count": {
                    "type": "integer"
                },
                "sinhala_raasi": {
                    "type": "string"
                },
                "smoking": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Foreign key to users table",
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                },
                "weight_kg": {
                    "type": "integer"
                }
            }
        },
        "models.ProfileEnums": {
            "type": "object",
            "properties": {
                "civil_status": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dietary_preference": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "education_level": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "employment_status": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "habit_frequency": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Question": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "questionText": {
                    "type": "string"
                },
                "questionType": {
                    "type": "string"
                }
            }
        },
        "models.RejectRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserProfile": {
            "type": "object",
            "properties": {
                "alcohol": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "birth_place": {
                    "type": "string"
                },
                "birth_time": {
                    "type": "string"
                },
                "caste": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "civil_status": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "dietary_preference": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "employment_status": {
                    "type": "string"
                },
                "father_occupation": {
                    "type": "string"
                },
                "field_of_study": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "height_cm": {
                    "type": "integer"
                },
                "highest_education": {
                    "type": "string"
                },
                "horoscope": {
                    "type": "string"
                },
                "horoscope_available": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "institution": {
                    "type": "string"
                },
                "interests": {
                    "description": "Array of interests",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phone_number": {
                    "type": "string"
                },
                "contact_verified": {
                    "type": "boolean"
                },
                "identity_verified": {
                    "type": "boolean"
                },
                "last_active_at": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "moderation_status": {
                    "type": "string"
                },
                "mother_occupation": {
                    "type": "string"
                },
                "nakshatra": {
                    "type": "string"
                },
                "occupation": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "profile_image_thumb_url": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "religion": {
                    "type": "string"
                },
                "religion_detail": {
                    "type": "string"
                },
                "siblings": {
                    "type": "string"
                },
                "siblings_count": {
                    "type": "integer"
                },
                "sinhala_raasi": {
                    "type": "string"
                },
                "smoking": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Foreign key to users table",
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                },
                "weight_kg": {
                    "type": "integer"
                }
            }
        },
        "utils.AnswersResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Answer"
                    }
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "utils.FriendRequestStatusResponse": {
            "type": "object",
            "properties": {
                "requestStatus": {
                    "type": "boolean"
                }
            }
        },
        "utils.FriendRequestsResponse": {
            "type": "object",
            "properties": {
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FriendRequest"
                    }
                }
            }
        },
        "utils.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.QuestionnaireResponse": {
            "type": "object",
            "properties": {
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Question"
                    }
                }
            }
        },
        "utils.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Dating App API",
	Description:      "API documentation for the Dating App backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
